package com.revision.datastructures.introarrays.assignment;

/*Given an array A of N integers. Count the number of elements
that have at least 1 elements greater than itself.*/
public class Solution1 {

    private static int greaterThanItselfBruteForce(int[] A) {
        int N = A.length;
        int count = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (A[i] < A[j]) {
                    count++;
                    break;
                }
            }
        }
        System.out.println(count);
        return count;

        // TC : O(N^2)
    }

    private static int greaterThanItselfOptimised(int[] A) {
        int N = A.length;
        int maxElement = Integer.MIN_VALUE;
        int count = 0;
        //find the maximum
        for (int i = 0; i < N; i++) {
            maxElement = Math.max(maxElement, A[i]);
        }
        //find the count of maximum
        for (int i = 0; i < N; i++) {
            if (A[i] == maxElement) {
                count++;
            }
        }
        System.out.println(maxElement + "-" + count);
        // find the ans by sub max count from length of Array
        return N - count;
        // TC = O(N)+O(N)+O(1) = O(N)
    }

    private static int greaterThanItselfOptimised1(int[] A) {
      /*   This approach is enhancement to the second optimised approach . In this approach merge both
        the loops of checking the max and counting the max */
        int N = A.length;
        int maxElement = Integer.MIN_VALUE;
        int count = 0;
        for (int i = 0; i < N; i++) {
            if (A[i] == maxElement) {
                count++;
            }
            if (A[i] > maxElement) {
                maxElement = A[i];
                count = 1;
            }
        }
        System.out.println(maxElement + "-" + count);
        return N - count;

    }

    public static void main(String[] args) {
        int[] A = {3, 1, 2, 4, 3, 4};
        int[] A1 = {340, 18, 125, 554, 32, 174, 284, 633, 283, 953, 841, 547, 603, 269, 35, 653, 777, 513, 940, 504, 634, 999, 797, 886, 911, 205, 919, 1, 844, 476, 314, 741, 748, 84, 938, 73, 755, 886, 133, 882, 203, 728, 798, 536, 136, 133, 77, 176, 764, 163, 845, 120, 36, 627, 69, 413, 216, 36, 512, 856, 55, 280, 989, 109, 841, 581, 479, 779, 259, 445, 789, 103, 999, 654, 819, 928, 529, 779, 264, 188, 515, 722, 814, 66, 961, 948, 654, 310, 326, 17, 977, 161, 254, 953, 287, 286, 762, 843, 60, 526, 455, 186, 406, 613, 478, 394, 201, 115, 790, 696, 715, 635, 430, 136, 856, 743, 163, 156, 543, 650, 120, 476, 258, 444, 193, 984, 394, 938, 855, 248, 42, 332, 383, 109, 215, 382, 355, 133, 318, 527, 783, 514, 846, 204, 133, 748, 554, 14, 162, 947, 280, 40, 774, 253, 412, 250, 224, 430, 126, 545, 192, 875, 23, 668, 75, 534, 57, 848, 931, 334, 428, 718, 620, 611, 785, 712, 128, 782, 499, 415, 260, 863, 953, 592, 625, 61, 334, 570, 388, 354, 345, 481, 542, 156, 829, 831, 908, 630, 730, 782, 616, 332, 634, 223, 846, 859, 837, 237, 984, 230, 998, 683, 395, 818, 763, 58, 664, 931, 64, 580, 580, 141, 221, 892, 456, 364, 436, 43, 689, 548, 468, 901, 361, 618, 801, 258, 780, 816, 505, 885, 500, 477, 952, 32, 294, 435, 613, 407, 859, 807, 139, 360, 112, 573, 449, 601, 678, 954, 394, 522, 786, 240, 310, 455, 286, 581, 23, 903, 143, 908, 445, 704, 805, 82, 347, 672, 310, 410, 855, 205, 818, 698, 710, 967, 584, 692, 229, 593, 1000, 278, 785, 651, 632, 290, 664, 274, 800, 439, 486, 415, 901, 774, 578, 964, 785, 677, 750, 667, 697, 776, 154, 102, 702, 531, 617, 879, 533, 969, 874, 250, 207, 648, 1000, 534, 89, 3, 11, 905, 181, 942, 117, 113, 688, 278, 454, 203, 434, 759, 57, 367, 897, 563, 564, 826, 502, 426, 316, 626, 646, 756, 151, 942, 666, 481, 680, 340, 567, 618, 902, 889, 527, 285, 581, 125, 375, 556, 323, 948, 623, 94, 468, 902, 93, 269, 263, 223, 578, 615, 551, 736, 243, 750, 292, 972, 41, 672, 487, 252, 994, 559, 737, 532, 494, 785, 836, 515, 250, 713, 960, 623, 536, 228, 616, 943, 893, 358, 611, 583, 170, 475, 123, 847, 460, 374, 217, 148, 445, 5, 215, 886, 480, 282, 324, 376, 104, 92, 988, 972, 50, 348, 278, 780, 318, 817, 684, 34, 698, 644, 126, 665, 799, 948, 303, 321, 874, 884, 718, 327, 676, 424, 151, 242, 235, 604, 536, 984, 799, 813, 108, 7, 781, 645, 867, 724, 328, 939, 920, 335, 307, 505, 442, 541, 40, 980, 563, 453, 124, 840, 588, 68, 40, 210, 679, 1, 114, 451, 508, 545, 66, 564, 605, 908, 645, 660, 169, 62, 510, 572, 788, 535, 608, 972, 822, 532, 373, 99, 624, 659, 706, 906, 354, 43, 528, 385, 432, 706, 77, 250, 824, 5, 977, 73, 517, 435, 10, 34, 735, 746, 392, 691, 209, 161, 441, 893, 514, 604, 350, 143, 133, 196, 844, 707, 208, 516, 685, 879, 729, 245, 468, 486, 716, 906, 676, 237, 246, 533, 682, 798, 566, 241};
        greaterThanItselfBruteForce(A1);
        System.out.println(greaterThanItselfOptimised(A1));
        System.out.println(greaterThanItselfOptimised1(A1));
    }

}
